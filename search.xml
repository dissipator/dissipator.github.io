<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[通过SSH协议采集监控数据]]></title>
    <url>%2F2018%2F04%2F11%2F%E9%80%9A%E8%BF%87SSH%E5%8D%8F%E8%AE%AE%E9%87%87%E9%9B%86%E7%9B%91%E6%8E%A7%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[通过SSH协议采集监控数据Zabbix中通过SSH协议也可以实现监控目标，通过SSH agent监控方式，需要对服务器进行监控但又不能安装Zabbix agent的环境中非常有用。Zabbix中使用SSh agent时要求libssh2的最低版本是 1.0.0。 SSH agent支持两种身份认证的方式：基于用户名密码的方式和基于秘钥的方式，使用用户名密码的方式不需要任何特殊的配置，添加监控项时需要在页面中输入明文的用户名和密码，因此在实际环境中建议使用基于秘钥的方式，但这个方式需要做些额外的配置。下面我们来看看基于秘钥的方式如何配置的。 首先，检查zabbix用户的设置，使用下面的命令。# grep zabbix /etc/passwd zabbix:x:996:994:Zabbix Monitoring System:/var/lib/zabbix:/sbin/nologin ​ 可以看到系统中zabbix用户的home目录是/var/lib/zabbix，确认该目录是否存在，如果不存在，使用下面的命令创建目录。 ​ # mkdir –p /var/lib/zabbix/.ssh ​ # chown –R zabbix:zabbix /var/lib/zabbix 接下来我们需要修改zabbix-server.conf文件，配置SSH Key文件的存储路径。 vi /etc/zabbix/zabbix-server.confSSHKeyLocation=/ var/lib/zabbix/.ssh修改完zabbix-server.conf配置文件后重启Zabbixserver。1systemctl restart zabbix-server 现在，我们生成zabbix用户的SSH Key，询问passphrase时直接回车就可以。 sudo -u zabbixssh-keygen -t rsa -b 2048 Generating public/private rsa key pair. Enter file in which to save the key (/var/lib/zabbix/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /var/lib/zabbix/.ssh/id_rsa. Your public key has been saved in /var/lib/zabbix/.ssh/id_rsa.pub. The key fingerprint is: 15:3e:d5:61:ed:16:b3:0a:67:9d:35:f0:35:55:0b:7e zabbix@zbxserver The key‘s randomart image is: +–[ RSA 2048]- —–+ | . .+++*| | . o..++*| | + ..EB| | . o o.+o| | S + .. | | . | | | | | | | +—————————-+ # ll total 8 -rw——- 1 zabbix zabbix 1675 May 31 13:29 id_rsa -rw-r–r– 1 zabbix zabbix 398 May 31 13:29 id_rsa.pub 接下来拷贝秘钥文件到被监控主机中，假设被监控主机的IP 地址是192.168.10.112。 # sudo -u zabbixssh-copy-id root@192.168.10.112 The authenticity of host ‘192.168.10.112 (192.168.10.112)‘ can‘t beestablished. ECDSA key fingerprint is0d:33:e5:5c:43:c3:5b:c4:da:e4:f0:6d:0c:fb:4a:6e. Are you sure you want to continue connecting (yes/no)? yes /bin/ssh-copy-id: INFO: attempting to log in with the new key(s), tofilter out any that are already installed /bin/ssh-copy-id: INFO: 1 key(s) remain to be installed – if youare prompted now it is to install the new keys root@192.168.10.112‘s password: Number of key(s) added: 1 Now try logging into the machine, with: “ssh ‘root@192.168.10.112‘“ and check to make sure that only the key(s) you wanted were added. 现在我们测试一下能否登录成功。 # sudo -u zabbix ssh root@192.168.10.112 当完成上面的配置后，就可以创建SSH agent监控方式的监控项了。 配置SSH agent监控项的步骤： 1、 创建一个新主机（Configuration –&gt; Host –&gt; Create host）。在主机配置页面的Host标签下添加Agentinterfaces接口配置，如下图3-14所示。 图 3-14 2、 在主机中创建新的监控项。 Name中输入监控项名称，例如Check uname。 Type中选择SSH agent。 Key中内容替换成ssh.run[uname]。 Host interface 中选择agent接口。 Authentication method中选择Public key。 User name中填写root ，Public key file中填写id_rsa_pub，Private keyfile中填写 id_rsa。 Key passphrase留空，如果生成密钥时你输入了passphrase，就需要在这里输入相同的passphrase。 Executed script中输入uname -a。 Type of information中选择Text类型。 其他参数可以保持不变，点击Add按钮保存。 如下图3—15所示。 图 3-15 3、 Monitoring –&gt; Latest data页面查看监控项。 使用SSH agent监控方式需要注意的是libssh2可能会把可执行脚本的输出截断到32KB，另外在脚本中最好使用命令的全路径。]]></content>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora小改造]]></title>
    <url>%2F2018%2F04%2F11%2FTypora%E5%B0%8F%E6%94%B9%E9%80%A0%2F</url>
    <content type="text"><![CDATA[使用Typora 链接WebSocket修改文件windows.html (line 82) 在后面添加收到的WebSocket信息接收element如下： 123456&lt;li&gt; &lt;span class="footer-word-count-info-line" style="font-weight: bold"&gt; &lt;span class="footer-word-count-no-selection" data-lg="Panel"&gt;SHELL&lt;/span&gt; &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;p id="shell-output"&gt;&lt;/p&gt;&lt;/li&gt; 随后加入输入框和按钮1234&lt;div class="footer-item footer-item-left" id="terminal"&gt;&lt;label&gt;SHELL:&lt;/label&gt;&lt;input type="text" id='shell' name="shell" value="pwd" /&gt;&lt;button type="submit" onclick="execs()" class="footer-item-right footer-btn " id="toggle-exec-btn"&gt;Exec&lt;/button&gt;&lt;/div&gt; 增加js脚本123456789101112131415161718192021222324252627282930var ws; function make_terminal(element, size, ws_url,paramter) &#123; ws = new WebSocket(ws_url); ws.onopen = function (event) &#123; ws.send(JSON.stringify(&#123;"parameter":paramter&#125;)); ws.onmessage = function (event) &#123; json_msg = JSON.parse(event.data); console.log(json_msg); switch (json_msg[0]) &#123; case "stdout": element.innerHTML="message:" + json_msg[1]; break; case "disconnect": element.innerHTML="[Finished...]"; break; &#125; &#125;; ws.close = function (argument) &#123;console.log(argument);&#125;; &#125;; &#125;; var ws_scheme = window.location.protocol == "https:" ? "wss" : "ws"; var ws_path = ws_scheme + '://127.0.0.1:8001/exec/';function execs() &#123; var message = &#123; common: $('#shell').val(), &#125; if(document.body.classList.contains("show-word-count"))&#123;console.log(1);&#125;else document.body.classList.add("show-word-count"); make_terminal(document.getElementById('shell-output'), &#123;rows: 1, cols: 90&#125;, ws_path, message); &#125;;]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbiz使用之添加NGINX监控]]></title>
    <url>%2F2018%2F04%2F11%2Fzabbiz%E4%BD%BF%E7%94%A8%E4%B9%8B%E6%B7%BB%E5%8A%A0NGINX%E7%9B%91%E6%8E%A7%2F</url>
    <content type="text"><![CDATA[zabbix使用之添加NGINX监控Agent端首先要检查Nginx是否安装了 http_stub_status_module 模块，通过下面的命令可以看到编译参数。 1nginx -V 如果没有这个模块，还需要重新编译Nginx. 配置NginxNginx 80端口的server配置增加如下的片段 location /nginx_status { stub_status on; access_log off; allow 127.0.0.1; deny all; } 检查 http://xx.x.x.x/nginx_status/ 12345&gt;&gt; curl http://127.0.0.1/nginx_statusActive connections: 4 server accepts handled requests 1162961 1162961 1210587 Reading: 0 Writing: 1 Waiting: 3 zabbix-agent 配置有3个步骤，首先是编写获取Nginx信息脚本，接着配置中增加key信息，然后重启agent 服务。 编写Nginx监控脚本，记住路径，后面配置需要用到。 ！！注意脚本权限问题，agent运行用户要能执行。 1234&gt;&gt;# mkdir -p /etc/zabbix-agent/scripts&gt;&gt;# cd /etc/zabbix-agent/scripts&gt;&gt;# vim nginx-check.sh&gt;&gt;# cat nginx-check.sh 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#!/bin/bash################################### Zabbix monitoring script## nginx:# - anything available via nginx stub-status module#################################### Contact:# vincent.viallet@gmail.com# Zabbix requested parameterZBX_REQ_DATA="$1"ZBX_REQ_DATA_URL="$2"# Nginx defaultsNGINX_STATUS_DEFAULT_URL="http://127.0.0.1/nginx_status"WGET_BIN="/usr/bin/wget"## Error handling:# - need to be displayable in Zabbix (avoid NOT_SUPPORTED)# - items need to be of type "float" (allow negative + float)#ERROR_NO_ACCESS_FILE="-0.9900"ERROR_NO_ACCESS="-0.9901"ERROR_WRONG_PARAM="-0.9902"ERROR_DATA="-0.9903" # either can not connect / bad host / bad port# Handle host and port if non-defaultif [ ! -z "$ZBX_REQ_DATA_URL" ]; then URL="$ZBX_REQ_DATA_URL"else URL="$NGINX_STATUS_DEFAULT_URL"fi# save the nginx stats in a variable for future parsingNGINX_STATS=$($WGET_BIN -q $URL -O - 2&gt; /dev/null)# error during retrieveif [ $? -ne 0 -o -z "$NGINX_STATS" ]; then echo $ERROR_DATA exit 1fi## Extract data from nginx stats#case $ZBX_REQ_DATA in active_connections) echo "$NGINX_STATS" | head -1 | cut -f3 -d' ';; accepted_connections) echo "$NGINX_STATS" | grep -Ev '[a-zA-Z]' | cut -f2 -d' ';; handled_connections) echo "$NGINX_STATS" | grep -Ev '[a-zA-Z]' | cut -f3 -d' ';; handled_requests) echo "$NGINX_STATS" | grep -Ev '[a-zA-Z]' | cut -f4 -d' ';; reading) echo "$NGINX_STATS" | tail -1 | cut -f2 -d' ';; writing) echo "$NGINX_STATS" | tail -1 | cut -f4 -d' ';; waiting) echo "$NGINX_STATS" | tail -1 | cut -f6 -d' ';; *) echo $ERROR_WRONG_PARAM; exit 1;;esacexit 0 agent的配置文件 /etc/zabbix/zabbix_agentd.conf 中定义了其他key的包含目录 Include=/etc/zabbix/zabbix_agentd.d/, 如果没有这个配置请自己添加下。接着在 /etc/zabbix/zabbix_agentd.d/ 目录新建一个文件 nginx-params.conf, 内容如下 1UserParameter=nginx[*],/usr/local/zabbix-agent/scripts/nginx-check.sh "$1" 重启agent 1/etc/init.d/zabbix-agent restart Server 的Web端首先命令行测试下刚才agent好使不，确认好用之后在web端导入模板，之后就可以给对应主机添加监控喽。 123zabbix_get -s 127.0.0.1 -p 10050 -k "nginx[reading]"0123 登录Zabbix3.0 的web界面，一次选择 Configuration &gt; Templates ， 在主界面的右上角有个 Import 按钮，用来导入模板。 模板文件比较长留一个下载地址 导入之后就可以给主机添加监控啦。]]></content>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbiz使用之添加Mysql监控]]></title>
    <url>%2F2018%2F04%2F11%2Fzabbiz%E4%BD%BF%E7%94%A8%E4%B9%8B%E6%B7%BB%E5%8A%A0Mysql%E7%9B%91%E6%8E%A7%2F</url>
    <content type="text"><![CDATA[添加 Mysql 监控Agent 端配置：在/etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf 文件中指定了 zabbix agent如何获取 mysql 服务的各种登录信息，并在/var/lib/zabbix/目录中新建”.my.cnf”文件，用以指定 zabbix agent 如何登陆数据库，默认使用的是 zabbix 用户，可以在 zabbix_conf文件中找到密码。 12345678910111213141516#mkdir /var/lib/zabbix#vim /var/lib/zabbix/.my.cnf[mysql]host=localhostuser=zabbixpassword=zabbixsocket=/var/lib/mysql/mysql.sock[mysqladmin]host=localhostuser=zabbixpassword=zabbixsocket=/var/lib/mysql/mysql.sock#service zabbix-agent restart#在数据库中进行授权：Mysql&gt; GRANT USAGE ON *.* TO zabbix@localhost IDENTIFIED BY ‘zabbix’;Mysql&gt;FLUSH PRIVILEGES; 在 zabbix_server 端测试是否可以得到检测数据：zabbix_get -s 10.10.1.13 -p 10050 -k mysql.ping1如显示 1，则代表可以通过zabbix_agent 获取到数据。Web 端配置：依次点击 组态–主机–（要监控 mysql 的主机）–模板–选择–Template App Mysql–添加–更新。完成后，点击监测中图形，选择主机和 Mysql bandwidth，等待检测。]]></content>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F04%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment ＣＮＡＭＥ1$ echo "blog.lucas.space"&gt;source/CNAME]]></content>
  </entry>
  <entry>
    <title><![CDATA[ORACLE11G 链接缓慢问题排查]]></title>
    <url>%2F2018%2F04%2F08%2FORACLE11G-%E9%93%BE%E6%8E%A5%E7%BC%93%E6%85%A2%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[问题描述： 服务器centos7,客服端任意 本地使用sqlplus / 连接很快，sqlplus xxx/xxx@127.0.0.1/sid 很慢 windows客服端在创建链接后也很慢 问题排查 tnsping 没有延迟 11G用户验证问题（只要有登陆错误，就会有延迟累计）－－－－－－不是 监听文件配置问题 －－－－－－不是 日志文件过大 －－－－－－－不是 机器名在监听文件和网络上的名字不一致－－－－－－－是 /etc/hosts /etc/hostname $ORACLE_HOME/network/admin/tnsname.ora /etc/sysconf/network reboot]]></content>
      <tags>
        <tag>linux,ORACLE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gateone]]></title>
    <url>%2F2018%2F03%2F13%2Fgateone%2F</url>
    <content type="text"><![CDATA[1. Gate One简介GateOne是一款基于HTML5的开源终端模拟器/SSH客户端。它可以用于运行任何终端应用。用户可以将GateOne嵌入其他应用程序从而提供各类终端访问界面，它也支持各类基于Web的管理界面。 Gate One在后台进程是使用Python实现的，其前端则是JaveScript+WebSockets。关于Gate One的介绍、源码和文档请参考下面的链接。 Gate One主页：http://liftoffsoftware.com/Products/GateOneGate One源码：https://github.com/liftoff/GateOneGate One文档：http://liftoff.github.io/GateOne/ 2. Gate One安装Gate One要求系统必须满足下面两个前提条件， （1）python: 2.6+ or 3.2+ （2）Tornado Framework 2.2+ 2.1系统环境准备在命令行终端中输入命令 $ python -V查看你本机是否安装了python，如果先安装python（注：树莓派上面自己带有python2和python3，python2对应python命令，python3对应python3命令）。 然后安装pip， $ wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py $ sudo python get-pip.py 安装tornado， $ sudo pip install tornado 安装完成之后，我们来验证一下我们的环境， $ python -V $ python -c &quot;import tornado; print(tornado.version)&quot; 2.2 Gate One获取和安装如果本地没有安装git，则先安装git， $ sudo apt-get install git 获取Gate One源码并进行安装，（注：这个地方git clone会下载到当前目录下！所以下载前记得cd到你想下载的位置目录去） $ git clone https://github.com/liftoff/GateOne.git $ cd GateOne $ sudo python ./setup.py install 3. Gate One验证Gate One的配置文件是/etc/gateone/conf.d/10server.conf， sudo vi /etc/gateone/conf.d/10server.conf 我们修改配置文件如下图： 这里我们修改了：“address” = “192.168.1.2” 这个是树莓派的ip地址“https_redirect” = “true”“port” = 8000 这个是监听端口 其他默认就可以了输入命令： $ sudo gateone 启动后，通过打印的信息，我们看到Gate One服务监听了8000端口号，然后在浏览器中输入https://192.168.1.106:8000/即可打开gateone的网页网络会进行拦截，点击 高级 ——添加例外——确认即可然后点击中间的Terminal图标登陆某台机器，到此链接成功，可以web浏览器远程终端操作树莓派了（这个地方我修改了端口号：8008，因为前面多次操作，出现下面遇到的问题！）多次链接可能会出现这种情况：红色错误显示不能监听，端口被占用了，可以修改签名配置文件端口号。重新测试。 4. 配置auth pam安装libpam_pwdfile包 sudo apt install libpam_pwdfile vi /etc/gateone/conf.d/20authentication.conf auth = &quot;pam&quot; pam_realm = &quot;AccessGateway1&quot; pam_service = &quot;gateone&quot; 在Safari下无法使用，报错如下：The WebSocket connection was closed. Will attempt to reconnect every 5 seconds…NOTE: Some web proxies do not work properly with WebSockets. PC和Android中的Chrome正常。 vi /etc/pam.d/gateone #%PAM-1.0 # Login using a htpasswd file #@include common-sessionauth required pam_pwdfile.so pwdfile=/etc/gateone/passwd required pam_permit.so auth = &quot;pam&quot; pam_realm = &quot;AccessGateway1&quot; pam_service = &quot;gateone&quot; 密码生成用在线工具就行，记得选择Crypt方式：http://tool.oschina.net/htpasswd将生成的信息加入密码文件就行。 sudo htpasswd -c -d /etc/gateone/users.passwd user1]]></content>
      <categories>
        <category>堡垒机</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>gateone</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my git]]></title>
    <url>%2F2018%2F03%2F13%2Fmy-git%2F</url>
    <content type="text"><![CDATA[my git]]></content>
  </entry>
  <entry>
    <title><![CDATA[oracle 11g 在centos7上静默安装与安装时的错误处理]]></title>
    <url>%2F2017%2F10%2F07%2Farticle-title%2F</url>
    <content type="text"><![CDATA[分类：oracle版权声明：本文为博主原创文章，未经博主允许不得转载。本次（2017-03-11）修改：1）修改程序安装目录名 /home —&gt; /data2）删减了一些不必要的包（ksh）3）增加了rlwrap 一个可以在sqlplus中可以使用键盘方向键来回找历史命令。4）增加了一些关键的截图，为帮助有需要的朋友理好知道安装进度5）蓝色字体、双#号是新增说明 1、准备系统、软件#oracle 11g：linux.x64_11gR2_database_2of2.ziplinux.x64_11gR2_database_1of2.zip #SYSTEMCentOS7 X86_64 2、安装依赖库#下载安装pdksh rpm -ivh pdksh-5.2.14-37.el5_8.1.x86_64.rpm ##： 安装这个pdksh rpm包时可能会出现与ksh冲突问题，如果不使用ksh可以把ksh卸载了，我安装了非常多次发现并不影响使用—-（2017-03-11） #安装其它依赖yum -y install binutils compat-libcap1 compat-libstdc++ gcc gcc-c++ glibc glibc-devel libgcc libstdc++ libstdc++-devel libaio sysstat libaio-devel elfutils-libelf-devel unixODBC unixODBC-devel ##： 删除了ksh安装包 3、用户目录创建groupadd oinstallgroupadd dbauseradd -m -g oinstall -G dba oracleecho “oracle:password” | chpasswdmkdir -p /home/oracle/ora11gchown -R oracle:oinstall /home/oracle/ora11gchmod -R 775 /home/oracle/ora11g 4、系统配置#内核参数调整cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOFfs.aio-max-nr = 3145728fs.file-max = 6815744kernel.shmall = 1073741824kernel.shmmax = 4398046511104kernel.shmmni = 4096kernel.sem = 250 32000 100 142net.ipv4.ip_local_port_range = 9000 65500net.core.rmem_default = 262144net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048576EOF #配置全局变量cat &gt;&gt; /etc/profile &lt;&lt;EOFif [ $USER = “oracle” ]; then if [ $SHELL = “/bin/ksh” ];then ulimit -p 16384 ulimit -n 65536 else ulimit -u 16384 -n 65536 fifiEOF ##：这个环境变量发现并没有什么用（重复配置），因为后面配置文件句柄数时已经永久配置了参数。 #配置oracle用户变量cat &gt;&gt; /data/oracle/.bash_profile &lt;&lt;EOFexport TMP=/tmpexport TMPDIR=$TMPexport ORACLE_HOSTNAME=$(hostname)export ORACLE_BASE=/data/oracle/ora11gexport ORACLE_HOME=/data/oracle/ora11g/product/11.2.0/db_1export ORACLE_SID=orcl11gexport ORACLE_TERM=xtermexport PATH=$ORACLE_HOME/bin:$PATH #以下配置在参考别人写时是要配置的，但是我加上后，系统命令无法执行，就直接注释了 #export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib64 #export CLASSPATH=$ORACLE_HOME/JRE:$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlib #export LD_ASSUME_KERNEL=2.6.18 ##：直接删除了export NLS_LANG=”american_america.UTF8”export NLS_LANG=”AMERICAN_AMERICA.US7ASCII”EOF #给oracle用户配置句柄数和文件打开数cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOForacle soft nproc 2048oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536EOF #配置oracle用户变量cat &gt;&gt; /home/oracle/.bashrc &lt;&lt;EOFalias sysdba=’sqlplus “/ nolog”‘EOF #配置oracle系统配置文件cat &gt;&gt; /etc/oraInst.loc &lt;&lt;EOFinventory_loc=/data/oracle/ora11g/oraInventoryinst_group=oinstallEOF #授权chmod 664 /etc/oraInst.loc #加载内核参数sysctl -p #给安装文件授权，我这里放在oracle home目录下chown -R oracle:oinstall /home/oracle/database #添加swap文件 #虚拟机没有或者不够swap空间dd if=/dev/zero of=/data/swap4g bs=1M count=4096mkswap /data/swap4gchmod 600 /data/swap4gswapon /data/swap4g ##：修改了文件/home/swap — &gt; /data/swap4g 5、安装、安装排错#解压安装文件 #配置静默安装应答文件su oracle ; cd ~cp /home/oracle/database/response/* . #配置初始化安装文件sed -i ‘s/oracle.install.option=./oracle.install.option=INSTALL_DB_SWONLY/g’ db_install.rspsed -i “s/ORACLE_HOSTNAME=./ORACLE_HOSTNAME=$(hostname)/g” db_install.rspsed -i ‘s/UNIX_GROUP_NAME=./UNIX_GROUP_NAME=oinstall/g’ db_install.rspsed -i ‘s/INVENTORY_LOCATION=./INVENTORY_LOCATION=\/data\/oracle\/ora11g\/oraInventory/g’ db_install.rspsed -i ‘s/SELECTED_LANGUAGES=./SELECTED_LANGUAGES=en,zh_CN/g’ db_install.rspsed -i ‘s/ORACLE_HOME=./ORACLE_HOME=\/data\/oracle\/ora11g\/product\/11.2.0\/db_1/g’ db_install.rspsed -i ‘s/ORACLE_BASE=./ORACLE_BASE=\/data\/oracle\/ora11g/g’ db_install.rspsed -i ‘s/oracle.install.db.InstallEdition=./oracle.install.db.InstallEdition=EE/g’ db_install.rspsed -i ‘s/oracle.install.db.isCustomInstall=./oracle.install.db.isCustomInstall=true/g’ db_install.rspsed -i ‘s/oracle.install.db.DBA_GROUP=./oracle.install.db.DBA_GROUP=dba/g’ db_install.rspsed -i ‘s/oracle.install.db.OPER_GROUP=./oracle.install.db.OPER_GROUP=oinstall/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.type=./oracle.install.db.config.starterdb.type=GENERAL_PURPOSE/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.globalDBName=./oracle.install.db.config.starterdb.globalDBName=ora11g/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.SID=./oracle.install.db.config.starterdb.SID=orcl/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.characterSet=./oracle.install.db.config.starterdb.characterSet=AL32UTF8/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.memoryOption=./oracle.install.db.config.starterdb.memoryOption=true/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.password.ALL=./oracle.install.db.config.starterdb.password.ALL=oracle/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.control=./oracle.install.db.config.starterdb.control=DB_CONTROL/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.dbcontrol.enableEmailNotification=./oracle.install.db.config.starterdb.dbcontrol.enableEmailNotification=true/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.dbcontrol.emailAddress=./oracle.install.db.config.starterdb.dbcontrol.emailAddress=test@test.com/g’ db_install.rspsed -i ‘s/oracle.install.db.config.starterdb.dbcontrol.SMTPServer=./oracle.install.db.config.starterdb.dbcontrol.SMTPServer=smtp.test.com/g’ db_install.rspsed -i ‘s/DECLINE_SECURITY_UPDATES=./DECLINE_SECURITY_UPDATES=true/g’ db_install.rspchmod 640 db_install.rsp ##：修改目录配置/home —&gt; /data ##：修正在sed 参数 #配置监听应答文件sed -i ‘s/INSTALL_TYPE=.*/INSTALL_TYPE=””custom””/g’ netca.rsp #配置数据库应答文件sed -i ‘s#GDBNAME =.#GDBNAME = “orcl11g”#g’ dbca.rspsed -i ‘s#SID =.#SID = “orcl11g”#g’ dbca.rspsed -i ‘s/#SYSPASSWORD =./SYSPASSWORD = “oracle”/g’ dbca.rspsed -i ‘s/#SYSTEMPASSWORD =./SYSPASSWORD = “oracle”/g’ dbca.rsp #安装/home/oracle/database/runInstaller -silent -responseFile /home/oracle/db_install.rsp #先使用上面命令检查系统环境合不合格，如果出现依赖库版本不对（一般是系统的版本高了，oracle要求的版本低一些）和一些内核参数检测不出来（并不是没有配置），这些可以忽略。如果其它的报错根据报错去给系统作相应的调整吧。 #排错只能看日志，没有其它更好的办法。 #比如以下错误都可以忽略801:INFO: Error Message:PRVF-7543 : 操作系统内核参数 “semmni” 在节点 “centos7-6” 上没有适当的值 [应为 = “128”; 找到 = “0”]。930:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “libaio-0.3.105 (i386)”951:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “glibc-2.3.4-2.41 (i686)”972:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “compat-libstdc++-33-3.2.3 (i386)”984:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “compat-libstdc++-33-3.2.3 (x86_64)”1050:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “libaio-devel-0.3.105 (i386)”1071:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “libgcc-3.4.6 (i386)”1092:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “libstdc++-3.4.6 (i386)”1131:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “unixODBC-2.2.11 (i386)”1152:INFO: Error Message:PRVF-7532 : 节点 “centos7-6” 上缺少程序包 “unixODBC-devel-2.2.11 (i386)” ##：新增错误信息 #以下命令是忽略那些可忽略参数的命令/home/oracle/database/runInstaller -silent -ignorePrereq -responseFile /home/oracle/db_install.rsp #检测安完成后，会提示用root用户执行以下面的命令去完成最后的安装sh /home/oracle/ora11g/product/11.2.0/db_1/root.sh ##：到目前为止，oracle已经全部安装完成 6、创建实例、监听文件#创建实例dbca -silent -responseFile /home/oracle/dbca.rsp #创建监听netca /silent /responseFile /home/oracle/netca.rsp #查看oracle的状态 7、安装rlwrapyum install readline* ncurses-develtar xf rlwrap-0.30.tar.gz.zipcd rlwrap-0.30./configuremakemake install #直接配置在.bash_profile里alias sqlplus=’rlwrap sqlplus’alias rman=’rlwrap rman’ source .bash_profile #里边涉及的一些敏感数据就不打码了，因为都在VM里跑的。。。 #主要参考文章出处：http://blog.csdn.net/dc666/article/details/50014693，非常感谢！]]></content>
  </entry>
</search>
